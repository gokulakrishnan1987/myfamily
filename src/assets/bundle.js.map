{"version":3,"sources":["webpack:///webpack/bootstrap 817dd76c04e746677b50?5990*********","webpack:///./demo/local-datasource/scripts.js","webpack:///orgchart-webcomponents.js?bafc*********"],"names":["document","addEventListener","datascource","orgchart","querySelector","appendChild"],"mappings":"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","file":"local-datasource/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 817dd76c04e746677b50","import OrgChart from '../js/orgchart-webcomponents.min.js';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  let datascource = {\n    'name': 'Lao Lao',\n    'title': 'general manager',\n    'children': [\n      { 'name': 'Bo Miao', 'title': 'department manager' },\n      { 'name': 'Su Miao', 'title': 'department manager',\n        'children': [\n          { 'name': 'Tie Hua', 'title': 'senior engineer' },\n          { 'name': 'Hei Hei', 'title': 'senior engineer',\n            'children': [\n              { 'name': 'Pang Pang', 'title': 'engineer' },\n              { 'name': 'Xiang Xiang', 'title': 'UE engineer' }\n            ]\n          }\n        ]\n      },\n      { 'name': 'Yu Jie', 'title': 'department manager' },\n      { 'name': 'Yu Li', 'title': 'department manager' },\n      { 'name': 'Hong Miao', 'title': 'department manager' },\n      { 'name': 'Yu Wei', 'title': 'department manager' },\n      { 'name': 'Chun Miao', 'title': 'department manager' },\n      { 'name': 'Yu Tie', 'title': 'department manager' }\n    ]\n  },\n  orgchart = new OrgChart({\n    'data' : datascource,\n    'depth': 2,\n    'nodeContent': 'title'\n  });\n\n  document.querySelector('#chart-container').appendChild(orgchart); \n\n});\n\n\n// WEBPACK FOOTER //\n// ./demo/local-datasource/scripts.js","export default class OrgChart extends HTMLElement {\n  constructor(options) {\n    super(); // always call super() first in the ctor.\n\n    /* Frankly, I do believe Show DOM has the narrow usage range. */\n    // Attach a shadow root to the element.\n    // let shadowRoot = this.attachShadow({mode: 'open'});\n\n    // shadowRoot.innerHTML = `\n    //   <style> </style>\n    //   <div class=\"container\"> </div>\n    // `;\n\n    Promise.prototype.finally = function (callback) {\n      let P = this.constructor;\n\n      return this.then(\n        value => P.resolve(callback()).then(() => value),\n        reason => P.resolve(callback()).then(() => { throw reason; })\n      );\n    };\n\n    let that = this,\n      defaultOptions = {\n        'nodeTitle': 'name',\n        'nodeId': 'id',\n        'toggleSiblingsResp': false,\n        'depth': 999,\n        'chartClass': '',\n        'parentNodeSymbol': 'fa-users',\n        'draggable': false,\n        'direction': 't2b',\n        'pan': false,\n        'zoom': false\n      },\n      opts = Object.assign(defaultOptions, options);\n\n    this.options = opts;\n\n    this.addEventListener('click', this._clickChart.bind(this));\n\n    if (opts.pan && opts.chartContainer) {\n      let chartContainer = document.querySelector(opts.chartContainer);\n\n      chartContainer.style.overflow = 'hidden';\n      this.addEventListener('mousedown', this._onPanStart.bind(this));\n      this.addEventListener('touchstart', this._onPanStart.bind(this));\n      document.body.addEventListener('mouseup', this._onPanEnd.bind(this));\n      document.body.addEventListener('touchend', this._onPanEnd.bind(this));\n    }\n\n    if (opts.zoom && opts.chartContainer) {\n      let chartContainer = document.querySelector(opts.chartContainer);\n\n      chartContainer.addEventListener('wheel', this._onWheeling.bind(this));\n      chartContainer.addEventListener('touchstart', this._onTouchStart.bind(this));\n      document.body.addEventListener('touchmove', this._onTouchMove.bind(this));\n      document.body.addEventListener('touchend', this._onTouchEnd.bind(this));\n    }\n  }\n  connectedCallback() {\n    let that = this,\n      opts = this.options,\n      data = opts.data;\n\n    this.setAttribute('class', 'orgchart' + (opts.chartClass !== '' ? ' ' + opts.chartClass : '') +\n      (opts.direction !== 't2b' ? ' ' + opts.direction : ''));\n    if (typeof data === 'object') { // local json datasource\n      this.buildHierarchy(this, opts.ajaxURL ? data : this._attachRel(data, '00'), 0);\n    } else if (typeof data === 'string' && data.startsWith('#')) { // ul datasource\n      this.buildHierarchy(this, this._buildJsonDS(document.querySelector(data).children[0]), 0);\n    } else { // ajax datasource\n      let spinner = document.createElement('i');\n\n      spinner.setAttribute('class', 'fa fa-circle-o-notch fa-spin spinner');\n      this.appendChild(spinner);\n      this._getJSON(data)\n      .then(function (resp) {\n        that.buildHierarchy(that, opts.ajaxURL ? resp : that._attachRel(resp, '00'), 0);\n      })\n      .catch(function (err) {\n        console.error('failed to fetch datasource for orgchart', err);\n      })\n      .finally(function () {\n        let spinner = that.querySelector('.spinner');\n\n        spinner.parentNode.removeChild(spinner);\n      });\n    }\n  }\n\n  disconnectedCallback() {\n\n  }\n\n  attributeChangedCallback(attrName, oldVal, newVal) {\n\n  }\n\n  _closest(el, fn) {\n    return el && ((fn(el) && el !== this) ? el : this._closest(el.parentNode, fn));\n  }\n  _siblings(el, expr) {\n    return Array.from(el.parentNode.children).filter((child) => {\n      if (child !== el) {\n        if (expr) {\n          return el.matches(expr);\n        }\n        return true;\n      }\n      return false;\n    });\n  }\n  _prevAll(el, expr) {\n    let sibs = [],\n      prevSib = el.previousElementSibling;\n\n    while (prevSib) {\n      if (!expr || prevSib.matches(expr)) {\n        sibs.push(prevSib);\n      }\n      prevSib = prevSib.previousElementSibling;\n    }\n    return sibs;\n  }\n  _nextAll(el, expr) {\n    let sibs = [];\n    let nextSib = el.nextElementSibling;\n\n    while (nextSib) {\n      if (!expr || nextSib.matches(expr)) {\n        sibs.push(nextSib);\n      }\n      nextSib = nextSib.nextElementSibling;\n    }\n    return sibs;\n  }\n  _isVisible(el) {\n    return el.offsetParent !== null;\n  }\n  _addClass(elements, classNames) {\n    elements.forEach((el) => {\n      if (classNames.indexOf(' ') > 0) {\n        classNames.split(' ').forEach((className) => el.classList.add(className));\n      } else {\n        el.classList.add(classNames);\n      }\n    });\n  }\n  _removeClass(elements, classNames) {\n    elements.forEach((el) => {\n      if (classNames.indexOf(' ') > 0) {\n        classNames.split(' ').forEach((className) => el.classList.remove(className));\n      } else {\n        el.classList.remove(classNames);\n      }\n    });\n  }\n  _css(elements, prop, val) {\n    elements.forEach((el) => {\n      el.style[prop] = val;\n    });\n  }\n  _removeAttr(elements, attr) {\n    elements.forEach((el) => {\n      el.removeAttribute(attr);\n    });\n  }\n  _one(el, type, listener, self) {\n    let one = function (event) {\n      try {\n        listener.call(self, event);\n      } finally {\n        el.removeEventListener(type, one);\n      }\n    };\n\n    el.addEventListener(type, one);\n  }\n  _getDescElements(ancestors, selector) {\n    let results = [];\n\n    ancestors.forEach((el) => results.push(...el.querySelectorAll(selector)));\n    return results;\n  }\n  _getJSON(url) {\n    return new Promise(function (resolve, reject) {\n      let xhr = new XMLHttpRequest();\n\n      function handler() {\n        if (this.readyState !== 4) {\n          return;\n        }\n        if (this.status === 200) {\n          resolve(JSON.parse(this.response));\n        } else {\n          reject(new Error(this.statusText));\n        }\n      }\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      // xhr.setRequestHeader('Accept', 'application/json');\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      xhr.send();\n    });\n  }\n  _buildJsonDS(li) {\n    let subObj = {\n      'name': li.firstChild.textContent.trim(),\n      'relationship': (li.parentNode.parentNode.nodeName === 'LI' ? '1' : '0') +\n        (li.parentNode.children.length > 1 ? 1 : 0) + (li.children.length ? 1 : 0)\n    };\n\n    if (li.id) {\n      subObj.id = li.id;\n    }\n    if (li.querySelector('ul')) {\n      Array.from(li.querySelector('ul').children).forEach((el) => {\n        if (!subObj.children) { subObj.children = []; }\n        subObj.children.push(this._buildJsonDS(el));\n      });\n    }\n    return subObj;\n  }\n  _attachRel(data, flags) {\n    data.relationship = flags + (data.children && data.children.length > 0 ? 1 : 0);\n    if (data.children) {\n      for (let item of data.children) {\n        this._attachRel(item, '1' + (data.children.length > 1 ? 1 : 0));\n      }\n    }\n    return data;\n  }\n  _repaint(node) {\n    if (node) {\n      node.style.offsetWidth = node.offsetWidth;\n    }\n  }\n  // whether the cursor is hovering over the node\n  _isInAction(node) {\n    return node.querySelector(':scope > .edge').className.indexOf('fa-') > -1;\n  }\n  // detect the exist/display state of related node\n  _getNodeState(node, relation) {\n    let criteria,\n      state = { 'exist': false, 'visible': false };\n\n    if (relation === 'parent') {\n      criteria = this._closest(node, (el) => el.classList && el.classList.contains('nodes'));\n      if (criteria) {\n        state.exist = true;\n      }\n      if (state.exist && this._isVisible(criteria.parentNode.children[0])) {\n        state.visible = true;\n      }\n    } else if (relation === 'children') {\n      criteria = this._closest(node, (el) => el.nodeName === 'TR').nextElementSibling;\n      if (criteria) {\n        state.exist = true;\n      }\n      if (state.exist && this._isVisible(criteria)) {\n        state.visible = true;\n      }\n    } else if (relation === 'siblings') {\n      criteria = this._siblings(this._closest(node, (el) => el.nodeName === 'TABLE').parentNode);\n      if (criteria.length) {\n        state.exist = true;\n      }\n      if (state.exist && criteria.some((el) => this._isVisible(el))) {\n        state.visible = true;\n      }\n    }\n\n    return state;\n  }\n  // find the related nodes\n  getRelatedNodes(node, relation) {\n    if (relation === 'parent') {\n      return this._closest(node, (el) => el.classList.contains('nodes'))\n        .parentNode.children[0].querySelector('.node');\n    } else if (relation === 'children') {\n      return Array.from(this._closest(node, (el) => el.nodeName === 'TABLE').lastChild.children)\n        .map((el) => el.querySelector('.node'));\n    } else if (relation === 'siblings') {\n      return this._siblings(this._closest(node, (el) => el.nodeName === 'TABLE').parentNode)\n        .map((el) => el.querySelector('.node'));\n    }\n    return [];\n  }\n  _switchHorizontalArrow(node) {\n    let opts = this.options,\n      leftEdge = node.querySelector('.leftEdge'),\n      rightEdge = node.querySelector('.rightEdge'),\n      temp = this._closest(node, (el) => el.nodeName === 'TABLE').parentNode;\n\n    if (opts.toggleSiblingsResp && (typeof opts.ajaxURL === 'undefined' ||\n      this._closest(node, (el) => el.classList.contains('.nodes')).dataset.siblingsLoaded)) {\n      let prevSib = temp.previousElementSibling,\n        nextSib = temp.nextElementSibling;\n\n      if (prevSib) {\n        if (prevSib.classList.contains('hidden')) {\n          leftEdge.classList.add('fa-chevron-left');\n          leftEdge.classList.remove('fa-chevron-right');\n        } else {\n          leftEdge.classList.add('fa-chevron-right');\n          leftEdge.classList.remove('fa-chevron-left');\n        }\n      }\n      if (nextSib) {\n        if (nextSib.classList.contains('hidden')) {\n          rightEdge.classList.add('fa-chevron-right');\n          rightEdge.classList.remove('fa-chevron-left');\n        } else {\n          rightEdge.classList.add('fa-chevron-left');\n          rightEdge.classList.remove('fa-chevron-right');\n        }\n      }\n    } else {\n      let sibs = this._siblings(temp),\n        sibsVisible = sibs.length ? !sibs.some((el) => el.classList.contains('hidden')) : false;\n\n      leftEdge.classList.toggle('fa-chevron-right', sibsVisible);\n      leftEdge.classList.toggle('fa-chevron-left', !sibsVisible);\n      rightEdge.classList.toggle('fa-chevron-left', sibsVisible);\n      rightEdge.classList.toggle('fa-chevron-right', !sibsVisible);\n    }\n  }\n  _hoverNode(event) {\n    let node = event.target,\n      flag = false,\n      topEdge = node.querySelector(':scope > .topEdge'),\n      bottomEdge = node.querySelector(':scope > .bottomEdge'),\n      leftEdge = node.querySelector(':scope > .leftEdge');\n\n    if (event.type === 'mouseenter') {\n      if (topEdge) {\n        flag = this._getNodeState(node, 'parent').visible;\n        topEdge.classList.toggle('fa-chevron-up', !flag);\n        topEdge.classList.toggle('fa-chevron-down', flag);\n      }\n      if (bottomEdge) {\n        flag = this._getNodeState(node, 'children').visible;\n        bottomEdge.classList.toggle('fa-chevron-down', !flag);\n        bottomEdge.classList.toggle('fa-chevron-up', flag);\n      }\n      if (leftEdge) {\n        this._switchHorizontalArrow(node);\n      }\n    } else {\n      Array.from(node.querySelectorAll(':scope > .edge')).forEach((el) => {\n        el.classList.remove('fa-chevron-up', 'fa-chevron-down', 'fa-chevron-right', 'fa-chevron-left');\n      });\n    }\n  }\n  // define node click event handler\n  _clickNode(event) {\n    let clickedNode = event.currentTarget,\n      focusedNode = this.querySelector('.focused');\n\n    if (focusedNode) {\n      focusedNode.classList.remove('focused');\n    }\n    clickedNode.classList.add('focused');\n  }\n  // build the parent node of specific node\n  _buildParentNode(currentRoot, nodeData, callback) {\n    let that = this,\n      table = document.createElement('table');\n\n    nodeData.relationship = '001';\n    this._createNode(nodeData, 0)\n      .then(function (nodeDiv) {\n        nodeDiv.classList.remove('slide-up');\n        nodeDiv.classList.add('slide-down');\n        let parentTr = document.createElement('tr'),\n          superiorLine = document.createElement('tr'),\n          inferiorLine = document.createElement('tr'),\n          childrenTr = document.createElement('tr');\n\n        parentTr.setAttribute('class', 'hidden');\n        parentTr.innerHTML = `<td colspan=\"2\"></td>`;\n        table.appendChild(parentTr);\n        superiorLine.setAttribute('class', 'lines hidden');\n        superiorLine.innerHTML = `<td colspan=\"2\"><div class=\"downLine\"></div></td>`;\n        table.appendChild(superiorLine);\n        inferiorLine.setAttribute('class', 'lines hidden');\n        inferiorLine.innerHTML = `<td class=\"rightLine\">&nbsp;</td><td class=\"leftLine\">&nbsp;</td>`;\n        table.appendChild(inferiorLine);\n        childrenTr.setAttribute('class', 'nodes');\n        childrenTr.innerHTML = `<td colspan=\"2\"></td>`;\n        table.appendChild(childrenTr);\n        table.querySelector('td').appendChild(nodeDiv);\n        that.insertBefore(table, that.children[0]);\n        table.children[3].children[0].appendChild(that.lastChild);\n        callback();\n      })\n      .catch(function (err) {\n        console.error('Failed to create parent node', err);\n      });\n  }\n  _switchVerticalArrow(arrow) {\n    arrow.classList.toggle('fa-chevron-up');\n    arrow.classList.toggle('fa-chevron-down');\n  }\n  // show the parent node of the specified node\n  showParent(node) {\n    // just show only one superior level\n    let temp = this._prevAll(this._closest(node, (el) => el.classList.contains('nodes')));\n\n    this._removeClass(temp, 'hidden');\n    // just show only one line\n    this._addClass(Array(temp[0].children).slice(1, -1), 'hidden');\n    // show parent node with animation\n    let parent = temp[2].querySelector('.node');\n\n    this._one(parent, 'transitionend', function () {\n      parent.classList.remove('slide');\n      if (this._isInAction(node)) {\n        this._switchVerticalArrow(node.querySelector(':scope > .topEdge'));\n      }\n    }, this);\n    this._repaint(parent);\n    parent.classList.add('slide');\n    parent.classList.remove('slide-down');\n  }\n  // show the sibling nodes of the specified node\n  showSiblings(node, direction) {\n    // firstly, show the sibling td tags\n    let siblings = [],\n      temp = this._closest(node, (el) => el.nodeName === 'TABLE').parentNode;\n\n    if (direction) {\n      siblings = direction === 'left' ? this._prevAll(temp) : this._nextAll(temp);\n    } else {\n      siblings = this._siblings(temp);\n    }\n    this._removeClass(siblings, 'hidden');\n    // secondly, show the lines\n    let upperLevel = this._prevAll(this._closest(node, (el) => el.classList.contains('nodes')));\n\n    temp = Array.from(upperLevel[0].querySelectorAll(':scope > .hidden'));\n    if (direction) {\n      this._removeClass(temp.slice(0, siblings.length * 2), 'hidden');\n    } else {\n      this._removeClass(temp, 'hidden');\n    }\n    // thirdly, do some cleaning stuff\n    if (!this._getNodeState(node, 'parent').visible) {\n      this._removeClass(upperLevel, 'hidden');\n      let parent = upperLevel[2].querySelector('.node');\n\n      this._one(parent, 'transitionend', function (event) {\n        event.target.classList.remove('slide');\n      }, this);\n      this._repaint(parent);\n      parent.classList.add('slide');\n      parent.classList.remove('slide-down');\n    }\n    // lastly, show the sibling nodes with animation\n    siblings.forEach((sib) => {\n      Array.from(sib.querySelectorAll('.node')).forEach((node) => {\n        if (this._isVisible(node)) {\n          node.classList.add('slide');\n          node.classList.remove('slide-left', 'slide-right');\n        }\n      });\n    });\n    this._one(siblings[0].querySelector('.slide'), 'transitionend', function () {\n      siblings.forEach((sib) => {\n        this._removeClass(Array.from(sib.querySelectorAll('.slide')), 'slide');\n      });\n      if (this._isInAction(node)) {\n        this._switchHorizontalArrow(node);\n        node.querySelector('.topEdge').classList.remove('fa-chevron-up');\n        node.querySelector('.topEdge').classList.add('fa-chevron-down');\n      }\n    }, this);\n  }\n  // hide the sibling nodes of the specified node\n  hideSiblings(node, direction) {\n    let nodeContainer = this._closest(node, (el) => el.nodeName === 'TABLE').parentNode,\n      siblings = this._siblings(nodeContainer);\n\n    siblings.forEach((sib) => {\n      if (sib.querySelector('.spinner')) {\n        this.dataset.inAjax = false;\n      }\n    });\n\n    if (!direction || (direction && direction === 'left')) {\n      let preSibs = this._prevAll(nodeContainer);\n\n      preSibs.forEach((sib) => {\n        Array.from(sib.querySelectorAll('.node')).forEach((node) => {\n          if (this._isVisible(node)) {\n            node.classList.add('slide', 'slide-right');\n          }\n        });\n      });\n    }\n    if (!direction || (direction && direction !== 'left')) {\n      let nextSibs = this._nextAll(nodeContainer);\n\n      nextSibs.forEach((sib) => {\n        Array.from(sib.querySelectorAll('.node')).forEach((node) => {\n          if (this._isVisible(node)) {\n            node.classList.add('slide', 'slide-left');\n          }\n        });\n      });\n    }\n\n    let animatedNodes = [];\n\n    this._siblings(nodeContainer).forEach((sib) => {\n      Array.prototype.push.apply(animatedNodes, Array.from(sib.querySelectorAll('.slide')));\n    });\n    let lines = [];\n\n    for (let node of animatedNodes) {\n      let temp = this._closest(node, function (el) {\n        return el.classList.contains('nodes');\n      }).previousElementSibling;\n\n      lines.push(temp);\n      lines.push(temp.previousElementSibling);\n    }\n    lines = [...new Set(lines)];\n    lines.forEach(function (line) {\n      line.style.visibility = 'hidden';\n    });\n\n    this._one(animatedNodes[0], 'transitionend', function (event) {\n      lines.forEach(function (line) {\n        line.removeAttribute('style');\n      });\n      let sibs = [];\n\n      if (direction) {\n        if (direction === 'left') {\n          sibs = this._prevAll(nodeContainer, ':not(.hidden)');\n        } else {\n          sibs = this._nextAll(nodeContainer, ':not(.hidden)');\n        }\n      } else {\n        sibs = this._siblings(nodeContainer);\n      }\n      let temp = Array.from(this._closest(nodeContainer, function (el) {\n        return el.classList.contains('nodes');\n      }).previousElementSibling.querySelectorAll(':scope > :not(.hidden)'));\n\n      let someLines = temp.slice(1, direction ? sibs.length * 2 + 1 : -1);\n\n      this._addClass(someLines, 'hidden');\n      this._removeClass(animatedNodes, 'slide');\n      sibs.forEach((sib) => {\n        Array.from(sib.querySelectorAll('.node')).slice(1).forEach((node) => {\n          if (this._isVisible(node)) {\n            node.classList.remove('slide-left', 'slide-right');\n            node.classList.add('slide-up');\n          }\n        });\n      });\n      sibs.forEach((sib) => {\n        this._addClass(Array.from(sib.querySelectorAll('.lines')), 'hidden');\n        this._addClass(Array.from(sib.querySelectorAll('.nodes')), 'hidden');\n        this._addClass(Array.from(sib.querySelectorAll('.verticalNodes')), 'hidden');\n      });\n      this._addClass(sibs, 'hidden');\n\n      if (this._isInAction(node)) {\n        this._switchHorizontalArrow(node);\n      }\n    }, this);\n  }\n  // recursively hide the ancestor node and sibling nodes of the specified node\n  hideParent(node) {\n    let temp = Array.from(this._closest(node, function (el) {\n      return el.classList.contains('nodes');\n    }).parentNode.children).slice(0, 3);\n\n    if (temp[0].querySelector('.spinner')) {\n      this.dataset.inAjax = false;\n    }\n    // hide the sibling nodes\n    if (this._getNodeState(node, 'siblings').visible) {\n      this.hideSiblings(node);\n    }\n    // hide the lines\n    let lines = temp.slice(1);\n\n    this._css(lines, 'visibility', 'hidden');\n    // hide the superior nodes with transition\n    let parent = temp[0].querySelector('.node'),\n      grandfatherVisible = this._getNodeState(parent, 'parent').visible;\n\n    if (parent && this._isVisible(parent)) {\n      parent.classList.add('slide', 'slide-down');\n      this._one(parent, 'transitionend', function () {\n        parent.classList.remove('slide');\n        this._removeAttr(lines, 'style');\n        this._addClass(temp, 'hidden');\n      }, this);\n    }\n    // if the current node has the parent node, hide it recursively\n    if (parent && grandfatherVisible) {\n      this.hideParent(parent);\n    }\n  }\n  // exposed method\n  addParent(currentRoot, data) {\n    let that = this;\n\n    this._buildParentNode(currentRoot, data, function () {\n      if (!currentRoot.querySelector(':scope > .topEdge')) {\n        let topEdge = document.createElement('i');\n\n        topEdge.setAttribute('class', 'edge verticalEdge topEdge fa');\n        currentRoot.appendChild(topEdge);\n      }\n      that.showParent(currentRoot);\n    });\n  }\n  // start up loading status for requesting new nodes\n  _startLoading(arrow, node) {\n    let opts = this.options;\n\n    if (typeof this.dataset.inAjax !== 'undefined' && this.dataset.inAjax === 'true') {\n      return false;\n    }\n\n    arrow.classList.add('hidden');\n    let spinner = document.createElement('i');\n\n    spinner.setAttribute('class', 'fa fa-circle-o-notch fa-spin spinner');\n    node.appendChild(spinner);\n    this._addClass(Array.from(node.querySelectorAll(':scope > *:not(.spinner)')), 'hazy');\n    this.dataset.inAjax = true;\n\n    return true;\n  }\n  // terminate loading status for requesting new nodes\n  _endLoading(arrow, node) {\n    let opts = this.options;\n\n    arrow.classList.remove('hidden');\n    node.querySelector(':scope > .spinner').remove();\n    this._removeClass(Array.from(node.querySelectorAll(':scope > .hazy')), 'hazy');\n    this.dataset.inAjax = false;\n  }\n  // define click event handler for the top edge\n  _clickTopEdge(event) {\n    event.stopPropagation();\n    let that = this,\n      topEdge = event.target,\n      node = topEdge.parentNode,\n      parentState = this._getNodeState(node, 'parent'),\n      opts = this.options;\n\n    if (parentState.exist) {\n      let temp = this._closest(node, function (el) {\n        return el.classList.contains('nodes');\n      });\n      let parent = temp.parentNode.firstChild.querySelector('.node');\n\n      if (parent.classList.contains('slide')) { return; }\n      // hide the ancestor nodes and sibling nodes of the specified node\n      if (parentState.visible) {\n        this.hideParent(node);\n        this._one(parent, 'transitionend', function () {\n          if (this._isInAction(node)) {\n            this._switchVerticalArrow(topEdge);\n            this._switchHorizontalArrow(node);\n          }\n        }, this);\n      } else { // show the ancestors and siblings\n        this.showParent(node);\n      }\n    } else {\n      // load the new parent node of the specified node by ajax request\n      let nodeId = topEdge.parentNode.id;\n\n      // start up loading status\n      if (this._startLoading(topEdge, node)) {\n        // load new nodes\n        this._getJSON(typeof opts.ajaxURL.parent === 'function' ?\n          opts.ajaxURL.parent(node.dataset.source) : opts.ajaxURL.parent + nodeId)\n        .then(function (resp) {\n          if (that.dataset.inAjax === 'true') {\n            if (Object.keys(resp).length) {\n              that.addParent(node, resp);\n            }\n          }\n        })\n        .catch(function (err) {\n          console.error('Failed to get parent node data.', err);\n        })\n        .finally(function () {\n          that._endLoading(topEdge, node);\n        });\n      }\n    }\n  }\n  // recursively hide the descendant nodes of the specified node\n  hideChildren(node) {\n    let that = this,\n      temp = this._nextAll(node.parentNode.parentNode),\n      lastItem = temp[temp.length - 1],\n      lines = [];\n\n    if (lastItem.querySelector('.spinner')) {\n      this.dataset.inAjax = false;\n    }\n    let descendants = Array.from(lastItem.querySelectorAll('.node')).filter((el) => that._isVisible(el)),\n      isVerticalDesc = lastItem.classList.contains('verticalNodes');\n\n    if (!isVerticalDesc) {\n      descendants.forEach((desc) => {\n        Array.prototype.push.apply(lines,\n          that._prevAll(that._closest(desc, (el) => el.classList.contains('nodes')), '.lines'));\n      });\n      lines = [...new Set(lines)];\n      this._css(lines, 'visibility', 'hidden');\n    }\n    this._one(descendants[0], 'transitionend', function (event) {\n      this._removeClass(descendants, 'slide');\n      if (isVerticalDesc) {\n        that._addClass(temp, 'hidden');\n      } else {\n        lines.forEach((el) => {\n          el.removeAttribute('style');\n          el.classList.add('hidden');\n          el.parentNode.lastChild.classList.add('hidden');\n        });\n        this._addClass(Array.from(lastItem.querySelectorAll('.verticalNodes')), 'hidden');\n      }\n      if (this._isInAction(node)) {\n        this._switchVerticalArrow(node.querySelector('.bottomEdge'));\n      }\n    }, this);\n    this._addClass(descendants, 'slide slide-up');\n  }\n  // show the children nodes of the specified node\n  showChildren(node) {\n    let that = this,\n      temp = this._nextAll(node.parentNode.parentNode),\n      descendants = [];\n\n    this._removeClass(temp, 'hidden');\n    if (temp.some((el) => el.classList.contains('verticalNodes'))) {\n      temp.forEach((el) => {\n        Array.prototype.push.apply(descendants, Array.from(el.querySelectorAll('.node')).filter((el) => {\n          return that._isVisible(el);\n        }));\n      });\n    } else {\n      Array.from(temp[2].children).forEach((el) => {\n        Array.prototype.push.apply(descendants,\n          Array.from(el.querySelector('tr').querySelectorAll('.node')).filter((el) => {\n            return that._isVisible(el);\n          }));\n      });\n    }\n    // the two following statements are used to enforce browser to repaint\n    this._repaint(descendants[0]);\n    this._one(descendants[0], 'transitionend', (event) => {\n      this._removeClass(descendants, 'slide');\n      if (this._isInAction(node)) {\n        this._switchVerticalArrow(node.querySelector('.bottomEdge'));\n      }\n    }, this);\n    this._addClass(descendants, 'slide');\n    this._removeClass(descendants, 'slide-up');\n  }\n  // build the child nodes of specific node\n  _buildChildNode(appendTo, nodeData, callback) {\n    let data = nodeData.children || nodeData.siblings;\n\n    appendTo.querySelector('td').setAttribute('colSpan', data.length * 2);\n    this.buildHierarchy(appendTo, { 'children': data }, 0, callback);\n  }\n  // exposed method\n  addChildren(node, data) {\n    let that = this,\n      opts = this.options,\n      count = 0;\n\n    this.dataset.inEdit = 'addChildren';\n    this._buildChildNode.call(this, this._closest(node, (el) => el.nodeName === 'TABLE'), data, function () {\n      if (++count === data.children.length) {\n        if (!node.querySelector('.bottomEdge')) {\n          let bottomEdge = document.createElement('i');\n\n          bottomEdge.setAttribute('class', 'edge verticalEdge bottomEdge fa');\n          node.appendChild(bottomEdge);\n        }\n        if (!node.querySelector('.symbol')) {\n          let symbol = document.createElement('i');\n\n          symbol.setAttribute('class', 'fa ' + opts.parentNodeSymbol + ' symbol');\n          node.querySelector(':scope > .title').appendChild(symbol);\n        }\n        that.showChildren(node);\n        that.dataset.inEdit = '';\n      }\n    });\n  }\n  // bind click event handler for the bottom edge\n  _clickBottomEdge(event) {\n    event.stopPropagation();\n    let that = this,\n      opts = this.options,\n      bottomEdge = event.target,\n      node = bottomEdge.parentNode,\n      childrenState = this._getNodeState(node, 'children');\n\n    if (childrenState.exist) {\n      let temp = this._closest(node, function (el) {\n        return el.nodeName === 'TR';\n      }).parentNode.lastChild;\n\n      if (Array.from(temp.querySelectorAll('.node')).some((node) => {\n        return this._isVisible(node) && node.classList.contains('slide');\n      })) { return; }\n      // hide the descendant nodes of the specified node\n      if (childrenState.visible) {\n        this.hideChildren(node);\n      } else { // show the descendants\n        this.showChildren(node);\n      }\n    } else { // load the new children nodes of the specified node by ajax request\n      let nodeId = bottomEdge.parentNode.id;\n\n      if (this._startLoading(bottomEdge, node)) {\n        this._getJSON(typeof opts.ajaxURL.children === 'function' ?\n          opts.ajaxURL.children(node.dataset.source) : opts.ajaxURL.children + nodeId)\n        .then(function (resp) {\n          if (that.dataset.inAjax === 'true') {\n            if (resp.children.length) {\n              that.addChildren(node, resp);\n            }\n          }\n        })\n        .catch(function (err) {\n          console.error('Failed to get children nodes data', err);\n        })\n        .finally(function () {\n          that._endLoading(bottomEdge, node);\n        });\n      }\n    }\n  }\n  // subsequent processing of build sibling nodes\n  _complementLine(oneSibling, siblingCount, existingSibligCount) {\n    let temp = oneSibling.parentNode.parentNode.children;\n\n    temp[0].children[0].setAttribute('colspan', siblingCount * 2);\n    temp[1].children[0].setAttribute('colspan', siblingCount * 2);\n    for (let i = 0; i < existingSibligCount; i++) {\n      let rightLine = document.createElement('td'),\n        leftLine = document.createElement('td');\n\n      rightLine.setAttribute('class', 'rightLine topLine');\n      rightLine.innerHTML = '&nbsp;';\n      temp[2].insertBefore(rightLine, temp[2].children[1]);\n      leftLine.setAttribute('class', 'leftLine topLine');\n      leftLine.innerHTML = '&nbsp;';\n      temp[2].insertBefore(leftLine, temp[2].children[1]);\n    }\n  }\n  // build the sibling nodes of specific node\n  _buildSiblingNode(nodeChart, nodeData, callback) {\n    let that = this,\n      newSiblingCount = nodeData.siblings ? nodeData.siblings.length : nodeData.children.length,\n      existingSibligCount = nodeChart.parentNode.nodeName === 'TD' ? this._closest(nodeChart, (el) => {\n        return el.nodeName === 'TR';\n      }).children.length : 1,\n      siblingCount = existingSibligCount + newSiblingCount,\n      insertPostion = (siblingCount > 1) ? Math.floor(siblingCount / 2 - 1) : 0;\n\n    // just build the sibling nodes for the specific node\n    if (nodeChart.parentNode.nodeName === 'TD') {\n      let temp = this._prevAll(nodeChart.parentNode.parentNode);\n\n      temp[0].remove();\n      temp[1].remove();\n      let childCount = 0;\n\n      that._buildChildNode.call(that, that._closest(nodeChart.parentNode, (el) => el.nodeName === 'TABLE'),\n        nodeData, () => {\n          if (++childCount === newSiblingCount) {\n            let siblingTds = Array.from(that._closest(nodeChart.parentNode, (el) => el.nodeName === 'TABLE')\n              .lastChild.children);\n\n            if (existingSibligCount > 1) {\n              let temp = nodeChart.parentNode.parentNode;\n\n              Array.from(temp.children).forEach((el) => {\n                siblingTds[0].parentNode.insertBefore(el, siblingTds[0]);\n              });\n              temp.remove();\n              that._complementLine(siblingTds[0], siblingCount, existingSibligCount);\n              that._addClass(siblingTds, 'hidden');\n              siblingTds.forEach((el) => {\n                that._addClass(el.querySelectorAll('.node'), 'slide-left');\n              });\n            } else {\n              let temp = nodeChart.parentNode.parentNode;\n\n              siblingTds[insertPostion].parentNode.insertBefore(nodeChart.parentNode, siblingTds[insertPostion + 1]);\n              temp.remove();\n              that._complementLine(siblingTds[insertPostion], siblingCount, 1);\n              that._addClass(siblingTds, 'hidden');\n              that._addClass(that._getDescElements(siblingTds.slice(0, insertPostion + 1), '.node'), 'slide-right');\n              that._addClass(that._getDescElements(siblingTds.slice(insertPostion + 1), '.node'), 'slide-left');\n            }\n            callback();\n          }\n        });\n    } else { // build the sibling nodes and parent node for the specific ndoe\n      let nodeCount = 0;\n\n      that.buildHierarchy.call(that, that, nodeData, 0, () => {\n        if (++nodeCount === siblingCount) {\n          let temp = nodeChart.nextElementSibling.children[3]\n            .children[insertPostion],\n            td = document.createElement('td');\n\n          td.setAttribute('colspan', 2);\n          td.appendChild(nodeChart);\n          temp.parentNode.insertBefore(td, temp.nextElementSibling);\n          that._complementLine(temp, siblingCount, 1);\n\n          let temp2 = that._closest(nodeChart, (el) => el.classList && el.classList.contains('nodes'))\n            .parentNode.children[0];\n\n          temp2.classList.add('hidden');\n          that._addClass(Array.from(temp2.querySelectorAll('.node')), 'slide-down');\n\n          let temp3 = this._siblings(nodeChart.parentNode);\n\n          that._addClass(temp3, 'hidden');\n          that._addClass(that._getDescElements(temp3.slice(0, insertPostion), '.node'), 'slide-right');\n          that._addClass(that._getDescElements(temp3.slice(insertPostion), '.node'), 'slide-left');\n          callback();\n        }\n      });\n    }\n  }\n  addSiblings(node, data) {\n    let that = this;\n\n    this.dataset.inEdit = 'addSiblings';\n    this._buildSiblingNode.call(this, this._closest(node, (el) => el.nodeName === 'TABLE'), data, () => {\n      that._closest(node, (el) => el.classList && el.classList.contains('nodes'))\n        .dataset.siblingsLoaded = true;\n      if (!node.querySelector('.leftEdge')) {\n        let rightEdge = document.createElement('i'),\n          leftEdge = document.createElement('i');\n\n        rightEdge.setAttribute('class', 'edge horizontalEdge rightEdge fa');\n        node.appendChild(rightEdge);\n        leftEdge.setAttribute('class', 'edge horizontalEdge leftEdge fa');\n        node.appendChild(leftEdge);\n      }\n      that.showSiblings(node);\n      that.dataset.inEdit = '';\n    });\n  }\n  removeNodes(node) {\n    let parent = this._closest(node, el => el.nodeName === 'TABLE').parentNode,\n      sibs = this._siblings(parent.parentNode);\n\n    if (parent.nodeName === 'TD') {\n      if (this._getNodeState(node, 'siblings').exist) {\n        sibs[2].querySelector('.topLine').nextElementSibling.remove();\n        sibs[2].querySelector('.topLine').remove();\n        sibs[0].children[0].setAttribute('colspan', sibs[2].children.length);\n        sibs[1].children[0].setAttribute('colspan', sibs[2].children.length);\n        parent.remove();\n      } else {\n        sibs[0].children[0].removeAttribute('colspan');\n        sibs[0].querySelector('.bottomEdge').remove();\n        this._siblings(sibs[0]).forEach(el => el.remove());\n      }\n    } else {\n      Array.from(parent.parentNode.children).forEach(el => el.remove());\n    }\n  }\n  // bind click event handler for the left and right edges\n  _clickHorizontalEdge(event) {\n    event.stopPropagation();\n    let that = this,\n      opts = this.options,\n      hEdge = event.target,\n      node = hEdge.parentNode,\n      siblingsState = this._getNodeState(node, 'siblings');\n\n    if (siblingsState.exist) {\n      let temp = this._closest(node, function (el) {\n          return el.nodeName === 'TABLE';\n        }).parentNode,\n        siblings = this._siblings(temp);\n\n      if (siblings.some((el) => {\n        let node = el.querySelector('.node');\n\n        return this._isVisible(node) && node.classList.contains('slide');\n      })) { return; }\n      if (opts.toggleSiblingsResp) {\n        let prevSib = this._closest(node, (el) => el.nodeName === 'TABLE').parentNode.previousElementSibling,\n          nextSib = this._closest(node, (el) => el.nodeName === 'TABLE').parentNode.nextElementSibling;\n\n        if (hEdge.classList.contains('leftEdge')) {\n          if (prevSib.classList.contains('hidden')) {\n            this.showSiblings(node, 'left');\n          } else {\n            this.hideSiblings(node, 'left');\n          }\n        } else {\n          if (nextSib.classList.contains('hidden')) {\n            this.showSiblings(node, 'right');\n          } else {\n            this.hideSiblings(node, 'right');\n          }\n        }\n      } else {\n        if (siblingsState.visible) {\n          this.hideSiblings(node);\n        } else {\n          this.showSiblings(node);\n        }\n      }\n    } else {\n      // load the new sibling nodes of the specified node by ajax request\n      let nodeId = hEdge.parentNode.id,\n        url = (this._getNodeState(node, 'parent').exist) ?\n          (typeof opts.ajaxURL.siblings === 'function' ?\n            opts.ajaxURL.siblings(JSON.parse(node.dataset.source)) : opts.ajaxURL.siblings + nodeId) :\n          (typeof opts.ajaxURL.families === 'function' ?\n            opts.ajaxURL.families(JSON.parse(node.dataset.source)) : opts.ajaxURL.families + nodeId);\n\n      if (this._startLoading(hEdge, node)) {\n        this._getJSON(url)\n        .then(function (resp) {\n          if (that.dataset.inAjax === 'true') {\n            if (resp.siblings || resp.children) {\n              that.addSiblings(node, resp);\n            }\n          }\n        })\n        .catch(function (err) {\n          console.error('Failed to get sibling nodes data', err);\n        })\n        .finally(function () {\n          that._endLoading(hEdge, node);\n        });\n      }\n    }\n  }\n  // event handler for toggle buttons in Hybrid(horizontal + vertical) OrgChart\n  _clickToggleButton(event) {\n    let that = this,\n      toggleBtn = event.target,\n      descWrapper = toggleBtn.parentNode.nextElementSibling,\n      descendants = Array.from(descWrapper.querySelectorAll('.node')),\n      children = Array.from(descWrapper.children).map(item => item.querySelector('.node'));\n\n    if (children.some((item) => item.classList.contains('slide'))) { return; }\n    toggleBtn.classList.toggle('fa-plus-square');\n    toggleBtn.classList.toggle('fa-minus-square');\n    if (descendants[0].classList.contains('slide-up')) {\n      descWrapper.classList.remove('hidden');\n      this._repaint(children[0]);\n      this._addClass(children, 'slide');\n      this._removeClass(children, 'slide-up');\n      this._one(children[0], 'transitionend', () => {\n        that._removeClass(children, 'slide');\n      });\n    } else {\n      this._addClass(descendants, 'slide slide-up');\n      this._one(descendants[0], 'transitionend', () => {\n        that._removeClass(descendants, 'slide');\n        descendants.forEach(desc => {\n          let ul = that._closest(desc, function (el) {\n            return el.nodeName === 'UL';\n          });\n\n          ul.classList.add('hidden');\n        });\n      });\n\n      descendants.forEach(desc => {\n        let subTBs = Array.from(desc.querySelectorAll('.toggleBtn'));\n\n        that._removeClass(subTBs, 'fa-minus-square');\n        that._addClass(subTBs, 'fa-plus-square');\n      });\n    }\n  }\n  _dispatchClickEvent(event) {\n    let classList = event.target.classList;\n\n    if (classList.contains('topEdge')) {\n      this._clickTopEdge(event);\n    } else if (classList.contains('rightEdge') || classList.contains('leftEdge')) {\n      this._clickHorizontalEdge(event);\n    } else if (classList.contains('bottomEdge')) {\n      this._clickBottomEdge(event);\n    } else if (classList.contains('toggleBtn')) {\n      this._clickToggleButton(event);\n    } else {\n      this._clickNode(event);\n    }\n  }\n  _onDragStart(event) {\n    let nodeDiv = event.target,\n      opts = this.options,\n      isFirefox = /firefox/.test(window.navigator.userAgent.toLowerCase());\n\n    if (isFirefox) {\n      event.dataTransfer.setData('text/html', 'hack for firefox');\n    }\n    // if users enable zoom or direction options\n    if (this.style.transform) {\n      let ghostNode, nodeCover;\n\n      if (!document.querySelector('.ghost-node')) {\n        ghostNode = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        ghostNode.classList.add('ghost-node');\n        nodeCover = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n        ghostNode.appendChild(nodeCover);\n        this.appendChild(ghostNode);\n      } else {\n        ghostNode = this.querySelector(':scope > .ghost-node');\n        nodeCover = ghostNode.children[0];\n      }\n      let transValues = this.style.transform.split(','),\n        scale = Math.abs(window.parseFloat((opts.direction === 't2b' || opts.direction === 'b2t') ?\n          transValues[0].slice(transValues[0].indexOf('(') + 1) : transValues[1]));\n\n      ghostNode.setAttribute('width', nodeDiv.offsetWidth);\n      ghostNode.setAttribute('height', nodeDiv.offsetHeight);\n      nodeCover.setAttribute('x', 5 * scale);\n      nodeCover.setAttribute('y', 5 * scale);\n      nodeCover.setAttribute('width', 120 * scale);\n      nodeCover.setAttribute('height', 40 * scale);\n      nodeCover.setAttribute('rx', 4 * scale);\n      nodeCover.setAttribute('ry', 4 * scale);\n      nodeCover.setAttribute('stroke-width', 1 * scale);\n      let xOffset = event.offsetX * scale,\n        yOffset = event.offsetY * scale;\n\n      if (opts.direction === 'l2r') {\n        xOffset = event.offsetY * scale;\n        yOffset = event.offsetX * scale;\n      } else if (opts.direction === 'r2l') {\n        xOffset = nodeDiv.offsetWidth - event.offsetY * scale;\n        yOffset = event.offsetX * scale;\n      } else if (opts.direction === 'b2t') {\n        xOffset = nodeDiv.offsetWidth - event.offsetX * scale;\n        yOffset = nodeDiv.offsetHeight - event.offsetY * scale;\n      }\n      if (isFirefox) { // hack for old version of Firefox(< 48.0)\n        let ghostNodeWrapper = document.createElement('img');\n\n        ghostNodeWrapper.src = 'data:image/svg+xml;utf8,' + (new XMLSerializer()).serializeToString(ghostNode);\n        event.dataTransfer.setDragImage(ghostNodeWrapper, xOffset, yOffset);\n        nodeCover.setAttribute('fill', 'rgb(255, 255, 255)');\n        nodeCover.setAttribute('stroke', 'rgb(191, 0, 0)');\n      } else {\n        event.dataTransfer.setDragImage(ghostNode, xOffset, yOffset);\n      }\n    }\n    let dragged = event.target,\n      dragZone = this._closest(dragged, (el) => {\n        return el.classList && el.classList.contains('nodes');\n      }).parentNode.children[0].querySelector('.node'),\n      dragHier = Array.from(this._closest(dragged, (el) => {\n        return el.nodeName === 'TABLE';\n      }).querySelectorAll('.node'));\n\n    this.dragged = dragged;\n    Array.from(this.querySelectorAll('.node')).forEach(function (node) {\n      if (!dragHier.includes(node)) {\n        if (opts.dropCriteria) {\n          if (opts.dropCriteria(dragged, dragZone, node)) {\n            node.classList.add('allowedDrop');\n          }\n        } else {\n          node.classList.add('allowedDrop');\n        }\n      }\n    });\n  }\n  _onDragOver(event) {\n    event.preventDefault();\n    let dropZone = event.currentTarget;\n\n    if (!dropZone.classList.contains('allowedDrop')) {\n      event.dataTransfer.dropEffect = 'none';\n    }\n  }\n  _onDragEnd(event) {\n    Array.from(this.querySelectorAll('.allowedDrop')).forEach(function (el) {\n      el.classList.remove('allowedDrop');\n    });\n  }\n  _onDrop(event) {\n    let dropZone = event.currentTarget,\n      dragged = this.dragged,\n      dragZone = this._closest(dragged, function (el) {\n        return el.classList && el.classList.contains('nodes');\n      }).parentNode.children[0].children[0];\n\n    this._removeClass(Array.from(this.querySelectorAll('.allowedDrop')), 'allowedDrop');\n    // firstly, deal with the hierarchy of drop zone\n    if (!dropZone.parentNode.parentNode.nextElementSibling) { // if the drop zone is a leaf node\n      let bottomEdge = document.createElement('i');\n\n      bottomEdge.setAttribute('class', 'edge verticalEdge bottomEdge fa');\n      dropZone.appendChild(bottomEdge);\n      dropZone.parentNode.setAttribute('colspan', 2);\n      let table = this._closest(dropZone, function (el) {\n          return el.nodeName === 'TABLE';\n        }),\n        upperTr = document.createElement('tr'),\n        lowerTr = document.createElement('tr'),\n        nodeTr = document.createElement('tr');\n\n      upperTr.setAttribute('class', 'lines');\n      upperTr.innerHTML = `<td colspan=\"2\"><div class=\"downLine\"></div></td>`;\n      table.appendChild(upperTr);\n      lowerTr.setAttribute('class', 'lines');\n      lowerTr.innerHTML = `<td class=\"rightLine\">&nbsp;</td><td class=\"leftLine\">&nbsp;</td>`;\n      table.appendChild(lowerTr);\n      nodeTr.setAttribute('class', 'nodes');\n      table.appendChild(nodeTr);\n      Array.from(dragged.querySelectorAll('.horizontalEdge')).forEach((hEdge) => {\n        dragged.removeChild(hEdge);\n      });\n      let draggedTd = this._closest(dragged, (el) => el.nodeName === 'TABLE').parentNode;\n\n      nodeTr.appendChild(draggedTd);\n    } else {\n      let dropColspan = window.parseInt(dropZone.parentNode.colSpan) + 2;\n\n      dropZone.parentNode.setAttribute('colspan', dropColspan);\n      dropZone.parentNode.parentNode.nextElementSibling.children[0].setAttribute('colspan', dropColspan);\n      if (!dragged.querySelector('.horizontalEdge')) {\n        let rightEdge = document.createElement('i'),\n          leftEdge = document.createElement('i');\n\n        rightEdge.setAttribute('class', 'edge horizontalEdge rightEdge fa');\n        dragged.appendChild(rightEdge);\n        leftEdge.setAttribute('class', 'edge horizontalEdge leftEdge fa');\n        dragged.appendChild(leftEdge);\n      }\n      let temp = dropZone.parentNode.parentNode.nextElementSibling.nextElementSibling,\n        leftline = document.createElement('td'),\n        rightline = document.createElement('td');\n\n      leftline.setAttribute('class', 'leftLine topLine');\n      leftline.innerHTML = `&nbsp;`;\n      temp.insertBefore(leftline, temp.children[1]);\n      rightline.setAttribute('class', 'rightLine topLine');\n      rightline.innerHTML = `&nbsp;`;\n      temp.insertBefore(rightline, temp.children[2]);\n      temp.nextElementSibling.appendChild(this._closest(dragged, function (el) {\n        return el.nodeName === 'TABLE';\n      }).parentNode);\n\n      let dropSibs = this._siblings(this._closest(dragged, function (el) {\n        return el.nodeName === 'TABLE';\n      }).parentNode).map((el) => el.querySelector('.node'));\n\n      if (dropSibs.length === 1) {\n        let rightEdge = document.createElement('i'),\n          leftEdge = document.createElement('i');\n\n        rightEdge.setAttribute('class', 'edge horizontalEdge rightEdge fa');\n        dropSibs[0].appendChild(rightEdge);\n        leftEdge.setAttribute('class', 'edge horizontalEdge leftEdge fa');\n        dropSibs[0].appendChild(leftEdge);\n      }\n    }\n    // secondly, deal with the hierarchy of dragged node\n    let dragColSpan = window.parseInt(dragZone.colSpan);\n\n    if (dragColSpan > 2) {\n      dragZone.setAttribute('colspan', dragColSpan - 2);\n      dragZone.parentNode.nextElementSibling.children[0].setAttribute('colspan', dragColSpan - 2);\n      let temp = dragZone.parentNode.nextElementSibling.nextElementSibling;\n\n      temp.children[1].remove();\n      temp.children[1].remove();\n\n      let dragSibs = Array.from(dragZone.parentNode.parentNode.children[3].children).map(function (td) {\n        return td.querySelector('.node');\n      });\n\n      if (dragSibs.length === 1) {\n        dragSibs[0].querySelector('.leftEdge').remove();\n        dragSibs[0].querySelector('.rightEdge').remove();\n      }\n    } else {\n      dragZone.removeAttribute('colspan');\n      dragZone.querySelector('.node').removeChild(dragZone.querySelector('.bottomEdge'));\n      Array.from(dragZone.parentNode.parentNode.children).slice(1).forEach((tr) => tr.remove());\n    }\n    let customE = new CustomEvent('nodedropped.orgchart', { 'detail': {\n      'draggedNode': dragged,\n      'dragZone': dragZone.children[0],\n      'dropZone': dropZone\n    }});\n\n    this.dispatchEvent(customE);\n  }\n  // create node\n  _createNode(nodeData, level) {\n    let that = this,\n      opts = this.options;\n\n    return new Promise(function (resolve, reject) {\n      if (nodeData.children) {\n        for (let child of nodeData.children) {\n          child.parentId = nodeData.id;\n        }\n      }\n\n      // construct the content of node\n      let nodeDiv = document.createElement('div');\n\n      delete nodeData.children;\n      nodeDiv.dataset.source = JSON.stringify(nodeData);\n      if (nodeData[opts.nodeId]) {\n        nodeDiv.id = nodeData[opts.nodeId];\n      }\n      let inEdit = that.dataset.inEdit,\n        isHidden;\n\n      if (inEdit) {\n        isHidden = inEdit === 'addChildren' ? ' slide-up' : '';\n      } else {\n        isHidden = level >= opts.depth ? ' slide-up' : '';\n      }\n      nodeDiv.setAttribute('class', 'node ' + (nodeData.className || '') + isHidden);\n      if (opts.draggable) {\n        nodeDiv.setAttribute('draggable', true);\n      }\n      if (nodeData.parentId) {\n        nodeDiv.setAttribute('data-parent', nodeData.parentId);\n      }\n      nodeDiv.innerHTML = `\n        <div class=\"title\">${nodeData[opts.nodeTitle]}</div>\n        ${opts.nodeContent ? `<div class=\"content\">${nodeData[opts.nodeContent]}</div>` : ''}\n      `;\n      // append 4 direction arrows or expand/collapse buttons\n      let flags = nodeData.relationship || '';\n\n      if (opts.verticalDepth && (level + 2) > opts.verticalDepth) {\n        if ((level + 1) >= opts.verticalDepth && Number(flags.substr(2, 1))) {\n          let toggleBtn = document.createElement('i'),\n            icon = level + 1 >= opts.depth ? 'plus' : 'minus';\n\n          toggleBtn.setAttribute('class', 'toggleBtn fa fa-' + icon + '-square');\n          nodeDiv.appendChild(toggleBtn);\n        }\n      } else {\n        if (Number(flags.substr(0, 1))) {\n          let topEdge = document.createElement('i');\n\n          topEdge.setAttribute('class', 'edge verticalEdge topEdge fa');\n          nodeDiv.appendChild(topEdge);\n        }\n        if (Number(flags.substr(1, 1))) {\n          let rightEdge = document.createElement('i'),\n            leftEdge = document.createElement('i');\n\n          rightEdge.setAttribute('class', 'edge horizontalEdge rightEdge fa');\n          nodeDiv.appendChild(rightEdge);\n          leftEdge.setAttribute('class', 'edge horizontalEdge leftEdge fa');\n          nodeDiv.appendChild(leftEdge);\n        }\n        if (Number(flags.substr(2, 1))) {\n          let bottomEdge = document.createElement('i'),\n            symbol = document.createElement('i'),\n            title = nodeDiv.querySelector(':scope > .title');\n\n          bottomEdge.setAttribute('class', 'edge verticalEdge bottomEdge fa');\n          nodeDiv.appendChild(bottomEdge);\n          symbol.setAttribute('class', 'fa ' + opts.parentNodeSymbol + ' symbol');\n          title.insertBefore(symbol, title.children[0]);\n        }\n      }\n\n      nodeDiv.addEventListener('mouseenter', that._hoverNode.bind(that));\n      nodeDiv.addEventListener('mouseleave', that._hoverNode.bind(that));\n      nodeDiv.addEventListener('click', that._dispatchClickEvent.bind(that));\n      if (opts.draggable) {\n        nodeDiv.addEventListener('dragstart', that._onDragStart.bind(that));\n        nodeDiv.addEventListener('dragover', that._onDragOver.bind(that));\n        nodeDiv.addEventListener('dragend', that._onDragEnd.bind(that));\n        nodeDiv.addEventListener('drop', that._onDrop.bind(that));\n      }\n      // allow user to append dom modification after finishing node create of orgchart\n      if (opts.createNode) {\n        opts.createNode(nodeDiv, nodeData);\n      }\n\n      resolve(nodeDiv);\n    });\n  }\n  buildHierarchy(appendTo, nodeData, level, callback) {\n    // Construct the node\n    let that = this,\n      opts = this.options,\n      nodeWrapper,\n      childNodes = nodeData.children,\n      isVerticalNode = opts.verticalDepth && (level + 1) >= opts.verticalDepth;\n\n    if (Object.keys(nodeData).length > 1) { // if nodeData has nested structure\n      nodeWrapper = isVerticalNode ? appendTo : document.createElement('table');\n      if (!isVerticalNode) {\n        appendTo.appendChild(nodeWrapper);\n      }\n      this._createNode(nodeData, level)\n      .then(function (nodeDiv) {\n        if (isVerticalNode) {\n          nodeWrapper.insertBefore(nodeDiv, nodeWrapper.firstChild);\n        } else {\n          let tr = document.createElement('tr');\n\n          tr.innerHTML = `\n            <td ${childNodes ? `colspan=\"${childNodes.length * 2}\"` : ''}>\n            </td>\n          `;\n          tr.children[0].appendChild(nodeDiv);\n          nodeWrapper.insertBefore(tr, nodeWrapper.children[0] ? nodeWrapper.children[0] : null);\n        }\n        if (callback) {\n          callback();\n        }\n      })\n      .catch(function (err) {\n        console.error('Failed to creat node', err);\n      });\n    }\n    // Construct the inferior nodes and connectiong lines\n    if (childNodes) {\n      if (Object.keys(nodeData).length === 1) { // if nodeData is just an array\n        nodeWrapper = appendTo;\n      }\n      let isHidden,\n        isVerticalLayer = opts.verticalDepth && (level + 2) >= opts.verticalDepth,\n        inEdit = that.dataset.inEdit;\n\n      if (inEdit) {\n        isHidden = inEdit === 'addSiblings' ? '' : ' hidden';\n      } else {\n        isHidden = level + 1 >= opts.depth ? ' hidden' : '';\n      }\n\n      // draw the line close to parent node\n      if (!isVerticalLayer) {\n        let tr = document.createElement('tr');\n\n        tr.setAttribute('class', 'lines' + isHidden);\n        tr.innerHTML = `\n          <td colspan=\"${ childNodes.length * 2 }\">\n            <div class=\"downLine\"></div>\n          </td>\n        `;\n        nodeWrapper.appendChild(tr);\n      }\n      // draw the lines close to children nodes\n      let lineLayer = document.createElement('tr');\n\n      lineLayer.setAttribute('class', 'lines' + isHidden);\n      lineLayer.innerHTML = `\n        <td class=\"rightLine\">&nbsp;</td>\n        ${childNodes.slice(1).map(() => `\n          <td class=\"leftLine topLine\">&nbsp;</td>\n          <td class=\"rightLine topLine\">&nbsp;</td>\n          `).join('')}\n        <td class=\"leftLine\">&nbsp;</td>\n      `;\n      let nodeLayer;\n\n      if (isVerticalLayer) {\n        nodeLayer = document.createElement('ul');\n        if (isHidden) {\n          nodeLayer.classList.add(isHidden.trim());\n        }\n        if (level + 2 === opts.verticalDepth) {\n          let tr = document.createElement('tr');\n\n          tr.setAttribute('class', 'verticalNodes' + isHidden);\n          tr.innerHTML = `<td></td>`;\n          tr.firstChild.appendChild(nodeLayer);\n          nodeWrapper.appendChild(tr);\n        } else {\n          nodeWrapper.appendChild(nodeLayer);\n        }\n      } else {\n        nodeLayer = document.createElement('tr');\n        nodeLayer.setAttribute('class', 'nodes' + isHidden);\n        nodeWrapper.appendChild(lineLayer);\n        nodeWrapper.appendChild(nodeLayer);\n      }\n      // recurse through children nodes\n      childNodes.forEach((child) => {\n        let nodeCell;\n\n        if (isVerticalLayer) {\n          nodeCell = document.createElement('li');\n        } else {\n          nodeCell = document.createElement('td');\n          nodeCell.setAttribute('colspan', 2);\n        }\n        nodeLayer.appendChild(nodeCell);\n        that.buildHierarchy(nodeCell, child, level + 1, callback);\n      });\n    }\n  }\n  _clickChart(event) {\n    let closestNode = this._closest(event.target, function (el) {\n      return el.classList && el.classList.contains('node');\n    });\n\n    if (!closestNode && this.querySelector('.node.focused')) {\n      this.querySelector('.node.focused').classList.remove('focused');\n    }\n  }\n  _loopChart(chart) {\n    let subObj = { 'id': chart.querySelector('.node').id };\n\n    if (chart.children[3]) {\n      Array.from(chart.children[3].children).forEach((el) => {\n        if (!subObj.children) { subObj.children = []; }\n        subObj.children.push(this._loopChart(el.firstChild));\n      });\n    }\n    return subObj;\n  }\n  getHierarchy() {\n    if (!this.querySelector('.node').id) {\n      return 'Error: Nodes of orghcart to be exported must have id attribute!';\n    }\n    return this._loopChart(this.querySelector('table'));\n  }\n  _onPanStart(event) {\n    let chart = event.currentTarget;\n\n    if (this._closest(event.target, (el) => el.classList && el.classList.contains('node')) ||\n      (event.touches && event.touches.length > 1)) {\n      chart.dataset.panning = false;\n      return;\n    }\n    chart.style.cursor = 'move';\n    chart.dataset.panning = true;\n\n    let lastX = 0,\n      lastY = 0,\n      lastTf = window.getComputedStyle(chart).transform;\n\n    if (lastTf !== 'none') {\n      let temp = lastTf.split(',');\n\n      if (!lastTf.includes('3d')) {\n        lastX = Number.parseInt(temp[4], 10);\n        lastY = Number.parseInt(temp[5], 10);\n      } else {\n        lastX = Number.parseInt(temp[12], 10);\n        lastY = Number.parseInt(temp[13], 10);\n      }\n    }\n    let startX = 0,\n      startY = 0;\n\n    if (!event.targetTouches) { // pan on desktop\n      startX = event.pageX - lastX;\n      startY = event.pageY - lastY;\n    } else if (event.targetTouches.length === 1) { // pan on mobile device\n      startX = event.targetTouches[0].pageX - lastX;\n      startY = event.targetTouches[0].pageY - lastY;\n    } else if (event.targetTouches.length > 1) {\n      return;\n    }\n    chart.dataset.panStart = JSON.stringify({ 'startX': startX, 'startY': startY });\n    chart.addEventListener('mousemove', this._onPanning.bind(this));\n    chart.addEventListener('touchmove', this._onPanning.bind(this));\n  }\n  _onPanning(event) {\n    let chart = event.currentTarget;\n\n    if (chart.dataset.panning === 'false') {\n      return;\n    }\n    let newX = 0,\n      newY = 0,\n      panStart = JSON.parse(chart.dataset.panStart),\n      startX = panStart.startX,\n      startY = panStart.startY;\n\n    if (!event.targetTouches) { // pand on desktop\n      newX = event.pageX - startX;\n      newY = event.pageY - startY;\n    } else if (event.targetTouches.length === 1) { // pan on mobile device\n      newX = event.targetTouches[0].pageX - startX;\n      newY = event.targetTouches[0].pageY - startY;\n    } else if (event.targetTouches.length > 1) {\n      return;\n    }\n    let lastTf = window.getComputedStyle(chart).transform;\n\n    if (lastTf === 'none') {\n      if (!lastTf.includes('3d')) {\n        chart.style.transform = 'matrix(1, 0, 0, 1, ' + newX + ', ' + newY + ')';\n      } else {\n        chart.style.transform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ' + newX + ', ' + newY + ', 0, 1)';\n      }\n    } else {\n      let matrix = lastTf.split(',');\n\n      if (!lastTf.includes('3d')) {\n        matrix[4] = newX;\n        matrix[5] = newY + ')';\n      } else {\n        matrix[12] = newX;\n        matrix[13] = newY;\n      }\n      chart.style.transform = matrix.join(',');\n    }\n  }\n  _onPanEnd(event) {\n    if (this.dataset.panning === 'true') {\n      this.dataset.panning = false;\n      this.style.cursor = 'default';\n      document.body.removeEventListener('mousemove', this._onPanning);\n      document.body.removeEventListener('touchmove', this._onPanning);\n    }\n  }\n  _setChartScale(chart, newScale) {\n    let lastTf = window.getComputedStyle(chart).transform;\n\n    if (lastTf === 'none') {\n      chart.style.transform = 'scale(' + newScale + ',' + newScale + ')';\n    } else {\n      let matrix = lastTf.split(',');\n\n      if (!lastTf.includes('3d')) {\n        matrix[0] = 'matrix(' + newScale;\n        matrix[3] = newScale;\n        chart.style.transform = lastTf + ' scale(' + newScale + ',' + newScale + ')';\n      } else {\n        chart.style.transform = lastTf + ' scale3d(' + newScale + ',' + newScale + ', 1)';\n      }\n    }\n    chart.dataset.scale = newScale;\n  }\n  _onWheeling(event) {\n    event.preventDefault();\n\n    let newScale = event.deltaY > 0 ? 0.8 : 1.2;\n\n    this._setChartScale(this, newScale);\n  }\n  _getPinchDist(event) {\n    return Math.sqrt((event.touches[0].clientX - event.touches[1].clientX) *\n      (event.touches[0].clientX - event.touches[1].clientX) +\n      (event.touches[0].clientY - event.touches[1].clientY) *\n      (event.touches[0].clientY - event.touches[1].clientY));\n  }\n  _onTouchStart(event) {\n    if (event.touches && event.touches.length === 2) {\n      let dist = this._getPinchDist(event);\n\n      this.dataset.pinching = true;\n      this.dataset.pinchDistStart = dist;\n    }\n  }\n  _onTouchMove(event) {\n    if (this.dataset.pinching) {\n      let dist = this._getPinchDist(event);\n\n      this.dataset.pinchDistEnd = dist;\n    }\n  }\n  _onTouchEnd(event) {\n    if (this.dataset.pinching) {\n      this.dataset.pinching = false;\n      let diff = this.dataset.pinchDistEnd - this.dataset.pinchDistStart;\n\n      if (diff > 0) {\n        this._setChartScale(this, 1);\n      } else if (diff < 0) {\n        this._setChartScale(this, -1);\n      }\n    }\n  }\n}\n\nwindow.customElements.define('org-chart', OrgChart);\n\n\n\n// WEBPACK FOOTER //\n// orgchart-webcomponents.js"],"sourceRoot":""}